import java.util.Scanner;

public class GenericNumberStack<T extends Number> {
    private Number[] stack; // Array to hold Number types
    private int top;
    private int capacity;

    @SuppressWarnings("unchecked")
    public GenericNumberStack(int size) {
        capacity = size;
        stack = new Number[capacity]; // Array to hold Number types
        top = -1;
    }

    // Push an item onto the stack
    public void push(T item) {
        if (isFull()) {
            throw new StackOverflowError("Stack is full");
        }
        stack[++top] = item; // Store the Number object
    }

    // Pop an item from the stack
    public T pop() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty");
        }
        return (T) stack[top--]; // Return the Number object as type T
    }

    // Peek at the top item of the stack without removing it
    public T peek() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty");
        }
        return (T) stack[top]; // Return the top Number object as type T
    }

    // Check if the stack is empty
    public boolean isEmpty() {
        return top == -1;
    }

    // Check if the stack is full
    public boolean isFull() {
        return top == capacity - 1;
    }

    // Get the current size of the stack
    public int size() {
        return top + 1;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        GenericNumberStack<Number> mixedStack = new GenericNumberStack<>(5);

        System.out.println("Enter numbers to push onto the stack (type 'exit' to stop):");

        while (true) {
            String input = scanner.nextLine();

            // Check if the user wants to exit
            if (input.equalsIgnoreCase("exit")) {
                break;
            }

            try {
                // Try parsing the input to different types of Number
                if (input.contains(".")) {
                    // If the input contains a decimal, treat it as a Double
                    mixedStack.push(Double.parseDouble(input));
                } else {
                    // Otherwise, treat it as an Integer
                    mixedStack.push(Integer.parseInt(input));
                }
                System.out.println("Pushed: " + input);
            } catch (NumberFormatException e) {
                System.out.println("Invalid number, please enter a valid number or 'exit' to stop.");
            }
        }

        System.out.println("Stack size after input: " + mixedStack.size());

        // Display the elements in the stack
        System.out.println("Elements in the stack:");
        while (!mixedStack.isEmpty()) {
            System.out.println(mixedStack.pop());
        }

        scanner.close();
    }
}
